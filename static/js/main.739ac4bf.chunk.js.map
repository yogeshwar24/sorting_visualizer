{"version":3,"sources":["SortingAlgorithms/SortingAlgorithms.js","SortingVisualizer/SortingVisualizer.js","components/App.jsx","index.js"],"names":["swap","arr","idx1","idx2","temp","getMergeSortAnimations","array","auxArray","slice","animations","length","mergeSortHelper","mainArray","start","end","mid","Math","floor","k","i","j","push","merge","getQuickSortAnimations","quickSortHelper","pivot","randomIdx","random","storeIndex","partition","getHeapSortAnimations","maxHeapify","buildMaxHeap","heapSort","idx","leftChild","rightChild","max","SortingVisualizer","props","state","ANIMATION_SPEED","running","BARCOUNT","handleChangeSpeed","bind","handleChangeBarCount","this","resetArray","window","location","reload","setState","randomIntFromInterval","arrayBars","document","getElementsByClassName","style","backgroundColor","sortingFunction","jsSortedArray","sort","a","b","sortedArray","console","log","areEqual","copyArray","sorted","comparison","bubbleSort","action","barOne","barTwo","setTimeout","height","copyArray2","obj","focus","insertionSort","swapped","colorChange","setInterval","JSON","stringify","clearInterval","barOneStyle","barTwoStyle","background","color","newHeight","string","event","target","value","className","step","disabled","onChange","type","min","onClick","quickSort","mergeSort","map","key","width","React","Component","arr1","arr2","App","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.739ac4bf.chunk.js","sourcesContent":["function swap(arr,idx1,idx2){\n    const temp = arr[idx1];\n    arr[idx1]=arr[idx2];\n    arr[idx2]=temp;\n}\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n//animations array of objects = [{comparison:[a,b],swap:[a,b]}]\nexport function bubbleSort(array){\n    let animations=[];\n    \n    var sorted;\n    for (var i=0;i<array.length;i++){\n        sorted=false;\n        for (var j=0; j<array.length-i-1;j++){\n            animations.push({comparison:[j,j+1]});\n            if (array[j]>array[j+1]){\n                animations[animations.length-1].swap=true;\n                swap(array, j, j+1);\n                sorted=true;\n            }\n            \n        }\n      \n        if (!sorted){\n            return animations;\n        }\n    }\n}\n\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\n// animations = [{focus:a, comparison:[[a,b,swap(a boolean)],....]}]\nexport function insertionSort(array){\n    let animations=[];\n    for (let i=1;i<array.length;i++){\n        let obj = {focus:i, comparison:[]}\n        \n        for (let j=i;j>=1;j--){\n            let swapped = true;\n            obj.comparison.push([j-1,j]);\n            if (array[j-1]>array[j]){\n                obj.comparison[obj.comparison.length-1].push(swapped);\n                swap(array,j-1,j);\n            }else{\n                obj.comparison[obj.comparison.length-1].push(!swapped);\n                break;\n            }\n        }\n        animations.push(obj);\n    }\n    \n    return animations;\n}\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport function getMergeSortAnimations(array){\n    const auxArray = array.slice();\n    const animations = [];\n\n    if (array.length<=1){\n        return array;\n    }\n    let start = 0;\n    let end = array.length-1;\n    mergeSortHelper(array,auxArray,animations,start,end);\n\n    return animations;\n\n}\n\nfunction mergeSortHelper(mainArray,auxArray,animations,start,end){\n    const mid = Math.floor((start+end)/2);\n    if (start===end){return;}\n    //replace the positions of mainArray and auxArray\n    //so that in last call of mergeSortHelper, the true mainArray gets filled correctly\n    mergeSortHelper(auxArray,mainArray,animations,start,mid);\n    mergeSortHelper(auxArray,mainArray,animations,mid+1,end);\n\n    merge(mainArray,auxArray,animations,start,mid,end);\n\n}\n\nfunction merge(mainArray,auxArray,animations,start,mid,end){\n    let k = start; //traverse main array\n    let i = start; //for auxArray\n    let j = mid+1;\n\n    while (i<=mid && j<=end){\n        animations.push([i,j]);\n        animations.push([i,j]);\n        if (auxArray[i]<=auxArray[j]){\n            animations.push([k,auxArray[i]]);\n            mainArray[k++] = auxArray[i++];\n\n        }else{\n            animations.push([k,auxArray[j]]);\n            mainArray[k++] = auxArray[j++];\n        }\n    }\n    //take care of remaining values\n    while (i<=mid){\n        animations.push([i,i]);\n        animations.push([i,i]);\n        animations.push([k,auxArray[i]]);\n        mainArray[k++] = auxArray[i++];\n    }\n    while (j<=end){\n        animations.push([j,j]);\n        animations.push([j,j]);\n        animations.push([k,auxArray[j]]);\n        mainArray[k++] = auxArray[j++];\n    }\n\n}\n////////////////////////////////////////////////////////////////////////////////////////////////////\n\nexport function getQuickSortAnimations(array){\n    const animations=[];\n    quickSortHelper(array,0,array.length-1,animations);\n    return animations;\n}\n\nfunction quickSortHelper(array,start,end,animations){\n\n    if (start>=end){return ;}\n\n    const pivot = partition(array,start,end,animations);\n    quickSortHelper(array,start,pivot-1,animations);\n    quickSortHelper(array,pivot+1,end,animations);\n\n}\n\nfunction partition(array,start,end,animations){\n    \n    // const mid=Math.floor((start+end)/2) ;\n    const randomIdx = Math.floor(Math.random()*(end-start)+start);\n    swap(array,start,randomIdx);\n    animations.push([\"swap\",randomIdx,start]);\n    animations.push([\"revert\",randomIdx,start]);\n    const pivot = start; \n    animations.push([\"doPivot\",pivot]);\n    let storeIndex = start+1;\n\n    \n    for (let i=start+1;i<=end;i++){\n        animations.push([\"colorStoreIdx\",storeIndex]);\n        if (array[i]<array[pivot]){\n            animations.push([\"swap\",storeIndex,i]);\n            animations.push([\"revert\",storeIndex,i]);\n            swap(array,storeIndex,i);\n            storeIndex++;\n        }\n        animations.push([\"revertColorStoreIdx\",storeIndex]);\n        \n    }\n    animations.push([\"swap\",storeIndex-1,pivot]);\n    animations.push([\"revert\",storeIndex-1,pivot]);\n    swap(array,pivot,storeIndex-1);\n    animations.push([\"undoPivot\",pivot]);\n    return storeIndex-1;\n}\n\n//////////////////////////////////////////////////////////////////////////////////////////////////////\nexport function getHeapSortAnimations(arr){\n    const animations = [];\n    heapSort(arr,animations);\n    return animations;\n}\n\nfunction heapSort(arr,animations){\n    buildMaxHeap(arr,animations);\n    for (let i=(arr.length)-1;i>=0;i--){\n        animations.push([\"heapSortSwap\",0,i]);//change color to blue\n        animations.push([\"revert\",0,i]);//revert\n        swap(arr,0,i);\n        maxHeapify(arr,0,0,i-1,animations);\n        animations.push([\"sorted\",i,i]);\n    }\n}\n\nfunction buildMaxHeap(arr,animations){\n    for (let i=Math.floor(arr.length/2)-1;i>=0;i--){\n        maxHeapify(arr,i,0,arr.length-1,animations);\n    }\n}\n\nfunction maxHeapify(arr,idx,start,end,animations){\n    if (start<=end){\n        animations.push([\"initiate\",start,end]);//change color to yellow\n        let leftChild = 2*idx+1\n        let rightChild = leftChild+1;\n        if (rightChild>end && leftChild>end){\n            return;\n        }\n        if (rightChild>end){\n            rightChild = leftChild;\n        }\n\n        if (arr[idx]<Math.max(arr[leftChild],arr[rightChild])){\n            if (Math.max(arr[leftChild],arr[rightChild])===arr[leftChild]){\n                animations.push([\"swap\",idx,leftChild]);//change color to red\n                animations.push([\"revert\",idx,leftChild]);//revert color\n                swap(arr,idx,leftChild);\n                maxHeapify(arr,leftChild,start,end,animations);\n            }else{\n                animations.push([\"swap\",idx,rightChild]);//change color to red\n                animations.push([\"revert\",idx,rightChild]);//revert color\n                swap(arr,idx,rightChild);\n                maxHeapify(arr,rightChild,start,end,animations);\n            }\n        }\n        animations.push([\"revert\",start,end]);//revert color \n    }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","import './SortingVisualizer.css';\nimport React from 'react';\nimport { bubbleSort,\n    insertionSort,\n    getMergeSortAnimations,\n    getQuickSortAnimations,\n    getHeapSortAnimations } from '../SortingAlgorithms/SortingAlgorithms';\n\n\nconst barColor = '#00bcd4';//#00bcd4\n\n\n// const BARCOUNT = 100;\n\nexport default class SortingVisualizer extends React.Component{\n    constructor(props){\n        super(props);\n        this.state = {\n            array:[],\n            ANIMATION_SPEED:5,\n            running:false,\n            BARCOUNT:200,\n        };\n        this.handleChangeSpeed = this.handleChangeSpeed.bind(this);\n        this.handleChangeBarCount = this.handleChangeBarCount.bind(this);\n    }\n\n    componentDidMount(){\n        this.resetArray()\n    }\n\n    refreshPage(){\n        window.location.reload();\n        this.resetArray();\n    }\n\n    resetArray(){\n        const array=[];\n        this.setState({running:false});\n        for (let i=0;i<this.state.BARCOUNT;i++){\n            array.push(randomIntFromInterval(5,500));\n        }\n        this.setState({array});\n        //reset colors\n        const arrayBars = document.getElementsByClassName('array-bar');\n        if (arrayBars){\n            \n            for (let bar of arrayBars){\n                bar.style.backgroundColor=barColor;\n            }\n        }\n        \n    }\n\n    doNothing(){\n\n    }\n\n    testSort(sortingFunction){\n        \n        for (let i=0;i<500;i++){\n            let arr=[];\n            let length = randomIntFromInterval(0,500);\n            for (let j=0;j<length;j++){\n                arr.push(randomIntFromInterval(-1000,1000));\n            }\n            const jsSortedArray = arr.slice().sort((a,b)=>{return (a-b)});\n            const sortedArray  = sortingFunction(arr);\n            \n            \n            console.log(areEqual(jsSortedArray,sortedArray));\n        }\n    }\n    \n    swap(arr,idx1,idx2){\n        const temp = arr[idx1];\n        arr[idx1]=arr[idx2];\n        arr[idx2]=temp;\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////\n    bubbleSort(){\n       \n        this.setState({running:true});\n        \n        const copyArray = this.state.array.slice();\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const animations = bubbleSort(this.state.array.slice());\n        var j=copyArray.length-1;\n        \n        for (let i=0;i<animations.length;i++){\n            let action = animations[i];\n            const [idx1,idx2] = action.comparison;\n            let barOne = arrayBars[idx1].style;\n            let barTwo = arrayBars[idx2].style;\n            //make comparison change color\n            setTimeout(()=>{\n                barOne.backgroundColor = 'red';\n                barTwo.backgroundColor = 'red';\n                \n            },i*this.state.ANIMATION_SPEED)\n            //make swap\n            setTimeout(()=>{\n                if (action.swap){\n                    this.swap(copyArray,idx1,idx2);\n                    barOne.height = barTwo.height;\n                    barTwo.height = copyArray[idx2]+'px';\n                }\n\n                if (idx2===j){\n                    barOne.backgroundColor = barColor;\n                    barTwo.backgroundColor = 'green';\n                    j--;\n                }\n                else{\n                barOne.backgroundColor = barColor;\n                barTwo.backgroundColor = barColor;\n                }\n            \n            },i*this.state.ANIMATION_SPEED+5)\n        }\n        setTimeout(()=>{\n            //to change whole sorted color\n            for (let k=0;k<arrayBars.length;k++){\n                setTimeout(()=>{\n                    arrayBars[k].style.backgroundColor=\"rgb(\"+randomIntFromInterval(0,255)+\n                    \",\"+randomIntFromInterval(0,255)+\",\"+randomIntFromInterval(0,255)+\")\";\n                    if(k===arrayBars.length-1){\n                        this.setState({running:false});\n                    }\n                },k*5)\n                \n            }\n        },animations.length*this.state.ANIMATION_SPEED+10);\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    insertionSort(){\n        this.setState({running:true});\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const copyArray = this.state.array.slice(); \n        const copyArray2 = this.state.array.slice();\n        const animations = insertionSort(copyArray2);\n        const factor = 30;//to adjust timeout\n        let sortCompleted=false; //time to change whole sorted array color\n\n        for (let i=0;i<animations.length;i++){\n            \n            const {focus, comparison} = animations[i];\n            for (let j=0;j<comparison.length;j++){\n                \n                let idx1 = comparison[j][0];\n                let idx2 = comparison[j][1];\n                let swapped = comparison[j][2];\n                let barOne = arrayBars[idx1].style;\n                let barTwo = arrayBars[idx2].style;\n                //change color to red\n                setTimeout(()=>{\n                    \n                    barOne.backgroundColor=\"red\";\n                    barTwo.backgroundColor=\"red\";\n                },i*factor+(j*factor)*this.state.ANIMATION_SPEED);\n                //make swap if needed\n                setTimeout(()=>{\n                    if (swapped){\n                        this.swap(copyArray, idx1,idx2);\n                        barOne.height = copyArray[idx1]+\"px\";\n                        barTwo.height = copyArray[idx2]+\"px\";\n                    }\n                },i*factor+(j*factor)*this.state.ANIMATION_SPEED+5);\n                //setcolor again to blue\n                setTimeout(()=>{\n                    barOne.backgroundColor=barColor;\n                    barTwo.backgroundColor=barColor;\n\n                },i*factor+(j*factor)*this.state.ANIMATION_SPEED+3);//(i+j)*this.state.ANIMATION_SPEED+8\n\n            }\n        }\n\n        let colorChange=setInterval(()=>{\n            //keep probing until array is sorted\n            \n            if (JSON.stringify(copyArray2)===JSON.stringify(copyArray)){\n                clearInterval(colorChange);    \n                for (let k=0;k<arrayBars.length;k++){\n                    setTimeout(()=>{\n                        arrayBars[k].style.backgroundColor=\"rgb(\"+randomIntFromInterval(0,255)+\n                    \",\"+randomIntFromInterval(0,255)+\",\"+randomIntFromInterval(0,255)+\")\";\n                        if(k===arrayBars.length-1){\n                            this.setState({running:false});\n                        }\n                    },k*5)   \n                }\n            }\n        },500)\n\n        \n        \n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    heapSort(){\n        this.setState({running:true});\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const animations=getHeapSortAnimations(this.state.array.slice());\n        const auxArray = this.state.array.slice();\n        const factor = 1.5;\n        for (let i=0;i<animations.length;i++){\n            const [action,idx1,idx2] = animations[i];\n            console.log(animations[i]);\n            const barOneStyle = arrayBars[idx1].style;\n            const barTwoStyle = arrayBars[idx2].style;\n            switch (action){\n                case \"swap\":\n                    setTimeout(()=>{\n                        this.swap(auxArray,idx1,idx2);\n                        barOneStyle.height = auxArray[idx1]+\"px\";\n                        barTwoStyle.height = auxArray[idx2]+\"px\";\n                        barOneStyle.background = \"red\";\n                        barTwoStyle.background = \"red\";\n                    },i*this.state.ANIMATION_SPEED*factor);\n                    break;\n                case \"revert\":\n                    setTimeout(()=>{\n                        barOneStyle.background = barColor;\n                        barTwoStyle.background = barColor;\n                    },i*this.state.ANIMATION_SPEED*factor);\n                    break;\n                case \"heapSortSwap\":\n                    setTimeout(()=>{\n                    this.swap(auxArray,idx1,idx2);\n                        barOneStyle.height = auxArray[idx1]+\"px\";\n                        barTwoStyle.height = auxArray[idx2]+\"px\";\n                        barOneStyle.background = \"red\";\n                        barTwoStyle.background = \"red\";\n                    },i*this.state.ANIMATION_SPEED*factor);\n                    break;\n                case \"initiate\":\n                    setTimeout(()=>{\n                        barOneStyle.background = \"yellow\";\n                        barTwoStyle.background = \"yellow\";\n                    },i*this.state.ANIMATION_SPEED*factor);\n                    break;\n                case \"sorted\":\n                    setTimeout(()=>{\n                        barOneStyle.background = \"green\";\n                        barTwoStyle.background = \"green\";\n                    },i*this.state.ANIMATION_SPEED*factor);\n                    break;\n                default:\n                    console.log(action+\"not found\");\n            }\n        }\n\n        setTimeout(()=>{\n            //to change whole sorted color\n            \n            for (let k=0;k<arrayBars.length;k++){\n                setTimeout(()=>{\n                    \n                    arrayBars[k].style.backgroundColor=\"rgb(\"+randomIntFromInterval(0,255)+\n                    \",\"+randomIntFromInterval(0,255)+\",\"+randomIntFromInterval(0,255)+\")\";\n                    \n                    // arrayBars[k].style.backgroundColor=\"#3ca59d\";\n                    if(k===arrayBars.length-1){\n                        this.setState({running:false});\n                    }\n                },k*5)\n                \n            }\n        },animations.length*this.state.ANIMATION_SPEED*factor);\n\n\n\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    mergeSort(){\n        this.setState({running:true});\n        // this.running = true;\n        const arrayBars = document.getElementsByClassName('array-bar');\n        // const arr = Array.from(arrayBars);\n        const animations=getMergeSortAnimations(this.state.array.slice());\n        //animations array==>[compare,compare,swap.......]\n        for (let i=0; i<animations.length;i++){\n            const isColorChange = i%3 !==2;\n            \n            if (isColorChange){\n                const [idx1,idx2] = animations[i];\n                const barOneStyle = arrayBars[idx1].style;\n                const barTwoStyle = arrayBars[idx2].style;\n                const color = (i%3===0)?\"red\":barColor;\n                setTimeout(()=>{\n                    barOneStyle.backgroundColor = color;\n                    barTwoStyle.backgroundColor = color;\n                },i*this.state.ANIMATION_SPEED);\n            }else{\n                //[idx,height]\n                setTimeout(()=>{\n                    const [idx, newHeight] = animations[i];\n                    const barOneStyle = arrayBars[idx].style;\n                    barOneStyle.height = newHeight+\"px\";\n                },i*this.state.ANIMATION_SPEED);\n            }\n        }\n\n        setTimeout(()=>{\n            //to change whole sorted color\n            \n            for (let k=0;k<arrayBars.length;k++){\n                setTimeout(()=>{\n                    \n                    arrayBars[k].style.backgroundColor=\"rgb(\"+randomIntFromInterval(0,255)+\n                    \",\"+randomIntFromInterval(0,255)+\",\"+randomIntFromInterval(0,255)+\")\";\n                    \n                    // arrayBars[k].style.backgroundColor=\"#3ca59d\";\n                    if(k===arrayBars.length-1){\n                        this.setState({running:false});\n                    }\n                },k*5)\n                \n            }\n        },animations.length*this.state.ANIMATION_SPEED);\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    quickSort(){\n        this.setState({running:true});\n        const arrayBars = document.getElementsByClassName('array-bar');\n        const auxArray = this.state.array.slice();\n        const animations = getQuickSortAnimations(this.state.array.slice());\n        const factor = 1;\n        for (let i=0;i<animations.length;i++){\n            \n            if (animations[i].length===2){\n                const [string, idx] = animations[i];\n                if (idx<this.state.BARCOUNT){\n                    switch (string){\n                        case \"doPivot\":\n                            setTimeout(()=>{\n                                arrayBars[idx].style.backgroundColor=\"yellow\";\n                            },i*this.state.ANIMATION_SPEED*factor);\n                            break;\n                        case \"undoPivot\":\n                            setTimeout(()=>{\n                                arrayBars[idx].style.backgroundColor=barColor;\n                            },i*this.state.ANIMATION_SPEED*factor);\n                            break;\n                        case \"colorStoreIdx\":\n                            setTimeout(()=>{\n                                arrayBars[idx].style.backgroundColor=\"#45046a\";\n                            },i*this.state.ANIMATION_SPEED*factor);\n                            break;\n                        case \"revertColorStoreIdx\":\n                            setTimeout(()=>{\n                                arrayBars[idx].style.backgroundColor=barColor;\n                            },i*this.state.ANIMATION_SPEED*factor);\n                            break;\n                        default:\n                            console.log(\"case not found!!\");\n                            break;\n                    }\n                }\n\n                \n                \n            }\n            else{\n                const [string,idx1,idx2] = animations[i];\n                const barOneStyle = arrayBars[idx1].style;\n                const barTwoStyle = arrayBars[idx2].style;\n\n                switch (string){\n                    case \"swap\":\n                        setTimeout(()=>{\n                            this.swap(auxArray, idx1,idx2);\n                            barOneStyle.backgroundColor = \"#111d5e\";\n                            barTwoStyle.backgroundColor = \"#111d5e\";\n                           \n                            barOneStyle.height = auxArray[idx1]+\"px\";\n                            barTwoStyle.height = auxArray[idx2]+\"px\";\n                            \n                        },i*this.state.ANIMATION_SPEED*factor);\n                        break;\n                    case \"revert\":\n                        setTimeout(()=>{\n                            \n                            barOneStyle.backgroundColor = barColor;\n                            barTwoStyle.backgroundColor = barColor;\n\n                        },i*this.state.ANIMATION_SPEED*factor);\n                        break;\n                    default:\n                        console.log(\"case not found!!\");\n                        break;\n                    \n                }\n            }\n        }\n        setTimeout(()=>{\n            //to change whole sorted color\n            for (let k=0;k<arrayBars.length;k++){\n                setTimeout(()=>{\n                    arrayBars[k].style.backgroundColor=\"rgb(\"+randomIntFromInterval(0,255)+\n                    \",\"+randomIntFromInterval(0,255)+\",\"+randomIntFromInterval(0,255)+\")\";\n                    if(k===arrayBars.length-1){\n                        this.setState({running:false});\n                    }\n                },k*5)\n                \n            }\n        },animations.length*this.state.ANIMATION_SPEED*factor);\n            \n    }\n\n    //////////////////////////////////////////SLIDERS AND FUNCTIONS///////////////////////////////////\n    \n    handleChangeSpeed(event){\n        this.setState({ANIMATION_SPEED:10-event.target.value});\n        // this.resetArray();\n      };\n\n    handleChangeBarCount(event){\n        this.setState({BARCOUNT:event.target.value});\n        this.resetArray();\n    }\n    //////////////////////////////////////////////////////////////////////////////////////////////////\n    render(){\n        const running = this.state.running;\n        const array = this.state.array;\n        return (\n            <div className=\"all-container\">\n                <div className=\"btn-container\">\n                    <div className=\"slider-container\">\n                        <span style={{color:\"white\"}}>Sorting Speed</span>\n                        <input step=\"0.1\" value={10-this.state.ANIMATION_SPEED} disabled={running} onChange={this.handleChangeSpeed} type=\"range\" min=\"1\" max=\"9\"/>\n                    </div>\n                    <div className=\"slider-container\">\n                        <span style={{color:\"white\"}}>Number of Bars</span>\n                        <input step=\"1\" value={this.state.BARCOUNT} disabled={running} onChange={this.handleChangeBarCount} type=\"range\" min=\"100\" max=\"400\"/>\n                    </div>\n                    <button disabled={running} className=\"btn btn-light\" onClick={()=>{this.resetArray()}}>\n                        Generate New Array\n                    </button>\n                    <button disabled={running} className=\"btn btn-light\" onClick={()=>{this.bubbleSort()}}>\n                        Bubble Sort\n                    </button>\n                    <button disabled={running} className=\"btn btn-light\" onClick={()=>{this.quickSort()}}>\n                        Quick Sort\n                    </button>\n                    <button disabled={running} className=\"btn btn-light\" onClick={()=>{this.mergeSort()}}>\n                        Merge Sort\n                    </button>\n                    <button disabled={running} className=\"btn btn-light\" onClick={()=>{this.heapSort()}}>\n                        Heap Sort\n                    </button>\n                    <button disabled={running} className=\"btn btn-light\" onClick={()=>{this.insertionSort()}}>\n                        Insertion Sort\n                    </button>\n                 \n                </div> \n           \n                <div className=\"array-container\">\n                    {array.map((value, idx)=>{\n                        return (<div className=\"array-bar\" key={idx}\n                        style={{height:`${value}px`,\n                        width:`${Math.floor((500-this.state.BARCOUNT)/100)}px`,\n                        background:`${barColor}`}}>\n                            \n                        </div>)\n                    })}\n                        \n                </div>\n            </div>      \n            \n        )\n    }\n}\n\nfunction randomIntFromInterval(min,max){\n    //including min and max\n    return Math.floor(Math.random()*(max-min+1)+min)\n}\n\nfunction areEqual(arr1,arr2){\n    if (arr1.length!==arr2.length){return false}\n    \n    if (JSON.stringify(arr1)!==JSON.stringify(arr2)){return false}\n    return true;\n}","import React from 'react';\nimport SortingVisualizer from '../SortingVisualizer/SortingVisualizer'\n\nfunction App() {\n    return <div className=\"App\">\n     <SortingVisualizer> </SortingVisualizer> \n     </div> \n\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}